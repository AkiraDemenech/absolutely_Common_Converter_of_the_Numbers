
import mochila,sys



		


def ler (caso):
	if type(caso) == str:
		caso = open(caso,'r')
	

	o = []
	b=c=nx = None
	for ln in caso:
		if ln.isspace():
			continue
		if nx == None:
			try:
				nx = c	# o segundo número encontrado será a capacidade
				c = eval(ln.lower())				
				if c != None:
					nx, c = c
			#	print(nx,c,'A\t',ln)
			except ValueError:		
				nx = c[0]
				c = c[1]
			#	print(nx,c,'B\t',ln)
			except SyntaxError:
				nx = -1 # se já aparecer um par, lê até o final 
			#	print(nx,c,'C\t',ln)
			except:
			#	print(nx,c,'D\t',ln)
				continue 
		if nx:#!=0
			l = ln.split()
			i = len(l)
			while i > 0:
				i -= 1
				try:
					l[i] = eval(l[i])
				except Exception as ex: 
					print(ex,l.pop(i),file=sys.stderr)
			if len(l):					
				o.append(l)
				nx -= 1							
		#	print(nx,c,l,ln)
		if nx == 0:
			yield c, o 
			nx = c = None
			o = []
	if len(o):
		yield c,o



			

		

def escrever (arquivo, obj, limite=None, interesse=False,peso=True):
	if type(arquivo) == str:
		arquivo = open(arquivo, 'w')
	if limite == None:
		limite = mochila.capacidade(obj)
	print(len(obj),file=arquivo)
	print(limite,file=arquivo)
	for o in obj:
		print(o[interesse],o[peso],file=arquivo)
	return arquivo

'''sys.stdout = open('res.log','w')

print(mochila.melhor(None,[[38, 25], [47, 51], [33, 80], [12, 17], [84, 20], [55, 11], [45, 78], [64, 32], [96, 16], [47, 32]]),end='\n\n\n')
print(mochila.melhor(None, [[12, 7], [3, 11], [6, 5]]),end='\n\n')#54
print(mochila.melhor(None, [[5, 14], [15, 44], [14, 36], [10, 24]]),end='\n\n\n')#75

print(mochila.melhor(None, [[25, 38], [51, 47], [80, 33], [17, 12], [20, 84], [11, 55], [78, 45], [32, 64], [16, 96], [32, 47]],None,True,limitante=mochila.limitante_superior),end='\n\n')#
print(mochila.melhor(None, [[5, 14], [15, 44], [14, 36], [10, 24]],None,True,limitante=mochila.limitante_superior),end='\n\n\n')#75
print(mochila.melhor(None, [[12, 7], [3, 11], [6, 5]],None,True,limitante=mochila.limitante_superior),end='\n\n')#54

print(mochila.melhor(None,[[38, 25], [47, 51], [33, 80], [12, 17], [84, 20], [55, 11], [45, 78], [64, 32], [96, 16], [47, 32]],None,True,limitante=mochila.limitante_superior),end='\n\n\n')

print(mochila.melhor(None,[[10, 82], [19, 37], [28, 55], [37, 10], [46, 28], [55, 64], [64, 73], [73, 19], [82, 46], [91, 91]]))
print(mochila.melhor(None,[[820, 20], [910, 29], [712, 38], [127, 47], [730, 56], [703, 65], [559, 74], [631, 83], [163, 92], [901, 101], [442, 110], [55, 119], [424, 128], [460, 137], [352, 146], [937, 155], [118, 164], [694, 173], [964, 182], [892, 191], [604, 200], [28, 209], [109, 218], [883, 227], [775, 236], [487, 245], [793, 254], [298, 263], [550, 272], [748, 281], [361, 290], [46, 299], [739, 308], [316, 317], [253, 326], [262, 335], [217, 344], [928, 353], [145, 362], [289, 371], [406, 380], [334, 389], [946, 398], [838, 407], [685, 416], [235, 425], [100, 434], [505, 443], [523, 452], [973, 461], [280, 470], [514, 479], [415, 488], [496, 497], [271, 506], [865, 515], [64, 524], [307, 533], [343, 542], [802, 551], [136, 560], [541, 569], [577, 578], [370, 587], [10, 596], [856, 605], [73, 614], [811, 623], [451, 632], [766, 641], [847, 650], [784, 659], [244, 668], [469, 677], [154, 686], [613, 695], [568, 704], [82, 713], [721, 722], [226, 731], [667, 740], [397, 749], [19, 758], [379, 767], [658, 776], [829, 785], [676, 794], [595, 803], [181, 812], [91, 821], [982, 830], [325, 839], [640, 848], [199, 857], [388, 866], [586, 875], [874, 884], [190, 893], [433, 902], [991, 911], [208, 920], [955, 929], [757, 938], [37, 947], [622, 956], [919, 965], [478, 974], [532, 983], [172, 992], [649, 1001]]))
print(mochila.melhor(None,gerar(10,100)[0][1],None,True,limitante=mochila.limitante_superior))

escrever(open('10.txt','a'),[[10, 82], [19, 37], [28, 55], [37, 10], [46, 28], [55, 64], [64, 73], [73, 19], [82, 46], [91, 91]]).close()


for t in gerar(9,10):
	print('\nnx',file=escrever(open('10.txt','a'),t))


f = open('1000.txt','a')
#for t in gerar(9,100,12,112):


a = [[[316, 20], [280, 29], [199, 38], [100, 47], [82, 56], [739, 65], [964, 74], [19, 83], [505, 92], [910, 101], [370, 110], [190, 119], [667, 128], [901, 137], [208, 146], [433, 155], [712, 164], [46, 173], [28, 182], [127, 191], [226, 200], [622, 209], [775, 218], [325, 227], [514, 236], [163, 245], [415, 254], [343, 263], [757, 272], [154, 281], [145, 290], [388, 299], [946, 308], [973, 317], [10, 326], [37, 335], [658, 344], [118, 353], [460, 362], [847, 371], [703, 380], [136, 389], [478, 398], [874, 407], [496, 416], [298, 425], [730, 434], [559, 443], [532, 452], [253, 461], [352, 470], [982, 479], [451, 488], [919, 497], [811, 506], [595, 515], [217, 524], [307, 533], [334, 542], [820, 551], [55, 560], [829, 569], [883, 578], [784, 587], [109, 596], [406, 605], [892, 614], [181, 623], [955, 632], [379, 641], [73, 650], [721, 659], [613, 668], [631, 677], [937, 686], [64, 695], [766, 704], [235, 713], [640, 722], [577, 731], [928, 740], [838, 749], [424, 758], [676, 767], [487, 776], [523, 785], [991, 794], [289, 803], [793, 812], [694, 821], [469, 830], [244, 839], [262, 848], [172, 857], [604, 866], [802, 875], [361, 884], [91, 893], [649, 902], [271, 911], [397, 920], [586, 929], [550, 938], [442, 947], [568, 956], [748, 965], [685, 974], [856, 983], [865, 992], [541, 1001]],
[[820, 20], [910, 29], [712, 38], [127, 47], [730, 56], [703, 65], [559, 74], [631, 83],[163, 92], [901, 101], [442, 110], [55, 119], [424, 128], [460, 137], [352, 146], [937, 155], [118, 164], [694, 173], [964, 182], [892, 191], [604, 200], [28, 209], [109, 218], [883, 227], [775, 236], [487, 245], [793, 254], [298, 263], [550, 272], [748, 281], [361, 290], [46, 299], [739, 308], [316, 317], [253, 326], [262, 335], [217, 344], [928, 353], [145, 362], [289, 371], [406, 380], [334, 389], [946, 398], [838, 407], [685, 416], [235, 425], [100, 434], [505, 443], [523, 452], [973, 461], [280, 470], [514, 479], [415, 488], [496, 497], [271, 506], [865, 515], [64, 524], [307, 533], [343, 542], [802, 551], [136, 560], [541, 569], [577, 578], [370, 587], [10, 596], [856, 605], [73, 614], [811, 623], [451, 632], [766, 641], [847, 650], [784, 659], [244, 668], [469, 677], [154, 686], [613, 695], [568, 704], [82, 713], [721, 722], [226, 731], [667, 740], [397, 749], [19, 758], [379, 767], [658, 776], [829, 785], [676, 794], [595, 803], [181, 812], [91, 821], [982, 830], [325, 839], [640, 848], [199, 857], [388, 866], [586, 875], [874, 884], [190, 893], [433, 902], [991, 911], [208, 920], [955, 929], [757, 938], [37, 947], [622, 956], [919, 965], [478, 974], [532, 983], [172, 992], [649, 1001]],
[[748, 20], [361, 29], [964, 38], [739, 47], [289, 56], [145, 65], [586, 74], [892, 83], [334, 92], [478, 101], [991, 110], [244, 119], [253, 128], [811, 137], [856, 146], [559, 155], [595, 164], [136, 173], [784, 182], [685, 191], [676, 200], [496, 209], [757, 218], [730, 227], [460, 236], [919, 245], [847, 254], [55, 263], [325, 272], [28, 281], [568, 290], [82, 299], [532, 308], [946, 317], [397, 326], [694, 335], [262, 344], [541, 353], [19, 362], [172, 371], [928, 380], [388, 389], [622, 398], [424, 407], [91, 416], [343, 425], [154, 434], [523, 443], [775, 452], [766, 461], [703, 470], [874, 479], [631, 488], [712, 497], [298, 506], [10, 515], [883, 524], [163, 533], [793, 542], [217, 551], [865, 560], [199, 569], [901, 578], [415, 587], [118, 596], [226, 605], [442, 614], [73, 623], [109, 632], [307, 641], [604, 650], [379, 659], [577, 668], [658, 677], [190, 686], [505, 695], [271, 704], [37, 713], [64, 722], [802, 731], [370, 740], [181, 749], [280, 758], [955, 767], [127, 776], [649, 785], [451, 794], [613, 803], [469, 812], [100, 821], [721, 830], [487, 839], [406, 848], [46, 857], [973, 866], [829, 875], [667, 884], [820, 893], [316, 902], [208, 911], [352, 920], [514, 929], [433, 938], [982, 947], [838, 956], [550, 965], [235, 974], [937, 983], [910, 992], [640, 1001]]]
for b in a:
	c = 10
	while len(b) < 1000:
		b.append([math.ceil((1110-len(b))*random.random()),c])
		c += 1
	print('\nnx',file=escrever(f,b))'''

def rodar():
	pref = '__pycache__/'
	sufx = '..txt'
	for testes in ['10','100','1000']:
	#for testes in ['100..txt','1000..txt']:
		c = 1
		for caso in ler(pref+testes+sufx):
			sys.stdout = open('%s%s,%d;'%(pref,testes,c) + '%d-%02d-%02d_%02d-%02d-%02d.txt'%tuple(mochila.time.localtime()[:6]),'w')
			print(c,'\t',testes,file=sys.stderr)
			print('melhor caso\t',*mochila.melhor(*caso))#,None,True,limitante=mochila.limitante_superior))#
			sys.stdout.close()
		#	
			c+=1

def gerar_t():
	for t in [10,100,1000]:
		a = open('%d..txt'%t,'w')
		b = open('%d_.txt'%t,'w')
		for c in mochila.gerar(10,t):
			print('\nnx',file=escrever(a,c))
			print('\n',  file=escrever(b,c))
		a.close()
		b.close()

#print('aaaaaaaaaaaaa',file=sys.stderr)					
#print('melhor caso\t',*mochila.melhor(*caso,[41861, 0, 1, 1, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]))#[842, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1],None,True,limitante=mochila.limitante_superior		
#mochila.melhor(*caso,[842, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1])
		

gerar_t()

rodar()

print('Acabou!',file=sys.stderr)
input()